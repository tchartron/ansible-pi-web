---
# Later maybe add repositories if possible to have the latest version (https://downloads.mariadb.org/mariadb/repositories/#mirror=ovh)
# - name: Add PPA Repository
#   become: yes
#   become_method: sudo
#   apt_repository: repo={{ mariadb_ppa }}

# - name: Apt update
#   become: yes
#   become_method: sudo
#   apt: update_cache=yes

- name: Install MariaDB
  become: yes
  become_method: sudo
  apt: name=mariadb-server state=latest

# - name: Install PHP Packages
#   become: yes
#   become_method: sudo
#   apt: name={{ item }} state=latest
#   with_items: "{{ php_packages }}"
#   when: php_packages is defined
#   notify:
#     - restart php-fpm


#DONE DURING INSTALL IF NOT RETRY IT see https://wiki.archlinux.fr/MariaDB
# - name: Initializes the MariaDB data directory and creates the system and help tables, if they do not exist.
#   become: yes
#   become_method: sudo
#   shell: mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql

- name: Start and enable mariadb
  become: yes
  become_method: sudo
  service: name=mariadb state=started enabled=yes

  # Configuration secure installation
  # Reproducing sudo mysql_secure_installation
  # See https://stackoverflow.com/questions/25136498/ansible-answers-to-mysql-secure-installation

  #Install MySQLdb Python package for ansible to be able to run queries ansible is python
- name: Adds Python MySQL support on Debian/Ubuntu
  become: yes
  become_method: sudo
  apt: name=python-mysqldb state=latest
  when: ansible_os_family == 'Debian'

# - name: Adds Python MySQL support on RedHat/CentOS
#   yum: name=MySQL-python state=present
#   when: ansible_os_family == 'RedHat'

# By default mariadb root user authenticat via unix_socket and not password
# see https://mariadb.com/kb/en/library/authentication-plugin-unix-socket/
# Allowing password auth for root user
- name: Allowing password auth for root user
  become: yes
  become_method: sudo
  command: 'mariadb -ne "{{ item }}"'
  with_items:
    - ALTER USER {{ mariadb_root_username }}@localhost IDENTIFIED VIA mysql_native_password;
    - SET PASSWORD = PASSWORD('{{ mariadb_root_password }}');
  changed_when: False

  #Set root password
- name: Set root Password
  mysql_user: login_password={{ mariadb_root_password }} check_implicit_admin=yes name=root host={{ item }} password={{ mariadb_root_password }} state=present
  with_items:
    - localhost
    - 127.0.0.1
    - ::1

- name: Reload privilege tables
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - FLUSH PRIVILEGES
  changed_when: False

  #Remove anonymous users
# - name: Deletes anonymous MySQL server user for ansible_fqdn
#   mysql_user: login_user="{{ mariadb_root_username }}" login_password="{{ mariadb_root_password }}" user="" host_all=yes state=absent

# SQL way
- name: Remove anonymous users
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User=''
  changed_when: False


  #Remove root remote access
# - name: Secures the MySQL root user for IPV6 localhost (::1)
#   mysql_user: user="root" password="{{ mariadb_root_password }}" host="::1"

# - name: Secures the MySQL root user for IPV4 localhost (127.0.0.1)
#   mysql_user: user="root" password="{{ mariadb_root_password }}" host="127.0.0.1"

# - name: Secures the MySQL root user for localhost domain (localhost)
#   mysql_user: user="root" password="{{ mariadb_root_password }}" host="localhost"

# - name: Secures the MySQL root user for server_hostname domain
#   mysql_user: user="root" password="{{ mariadb_root_password }}" host="{{ ansible_fqdn }}"

# SQL way
- name: Disallow root login remotely
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='{{ mariadb_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: False

  #Remove the test database
- name: Removes the MySQL test database
  mysql_db: name=test state=absent

# SQL way
# - name: Remove test database and access to it
#   command: 'mysql -ne "{{ item }}"'
#   with_items:
#     - DROP DATABASE IF EXISTS test
#     - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
#   changed_when: False

- name: Create user and initialize app database
  include: db-config.yml

- name: Reload privilege tables (FLUSH PRIVILEGES)
  command: 'mysql -ne "{{ item }}"'
  with_items:
    - FLUSH PRIVILEGES
  changed_when: False

# - name: Import existing dump
#   include: import-dump.yml






# ------------------------#
# VERSION 2 more explicit #
# ------------------------#

# --
# # create root .my.cnf config file
# - name: Add .my.cnf
#   template: src=my.cnf.j2 dest=/root/.my.cnf owner=root group=root mode=0600

# # Set root password
# # UPDATE mysql.user SET Password=PASSWORD('mysecret') WHERE User='root';
# # FLUSH PRIVILEGES;

# - name: Set root Password
#   mysql_user: login_password={{ mariadb_root_password }} check_implicit_admin=yes name=root host={{ item }} password={{ mariadb_root_password }} state=present
#   with_items:
#     - localhost
#     - 127.0.0.1
#     - ::1

# - name: Reload privilege tables
#   command: 'mysql -ne "{{ item }}"'
#   with_items:
#     - FLUSH PRIVILEGES
#   changed_when: False

# - name: Remove anonymous users
#   command: 'mysql -ne "{{ item }}"'
#   with_items:
#     - DELETE FROM mysql.user WHERE User=''
#   changed_when: False

# - name: Disallow root login remotely
#   command: 'mysql -ne "{{ item }}"'
#   with_items:
#     - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
#   changed_when: False

# - name: Remove test database and access to it
#   command: 'mysql -ne "{{ item }}"'
#   with_items:
#     - DROP DATABASE IF EXISTS test
#     - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
#   changed_when: False

# - name: Reload privilege tables
#   command: 'mysql -ne "{{ item }}"'
#   with_items:
#     - FLUSH PRIVILEGES
# changed_when: False
